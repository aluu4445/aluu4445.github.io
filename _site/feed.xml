<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-08-16T22:51:30+10:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">andy luu</title><subtitle></subtitle><entry><title type="html">Making a Settings page on Flutter</title><link href="http://localhost:4000/learning/cs/2020/08/16/flutter3.html" rel="alternate" type="text/html" title="Making a Settings page on Flutter" /><published>2020-08-16T17:19:03+10:00</published><updated>2020-08-16T17:19:03+10:00</updated><id>http://localhost:4000/learning/cs/2020/08/16/flutter3</id><content type="html" xml:base="http://localhost:4000/learning/cs/2020/08/16/flutter3.html">&lt;p&gt;This is Part 3 of my posts about learning Flutter. Click here for &lt;a href=&quot;https://andyluu.com/learning/cs/2020/07/19/flutter.html&quot;&gt;Part 1&lt;/a&gt; and &lt;a href=&quot;https://andyluu.com/learning/cs/2020/08/10/flutter2.html&quot;&gt;Part 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After getting over the unexpectedly tall mountain that was notifications, I wanted to finish the other main functionality - the settings page where the user could change things like:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;their location&lt;/li&gt;
  &lt;li&gt;the threshold of rain probability to receive a notification&lt;/li&gt;
  &lt;li&gt;the period of time to check for rain&lt;/li&gt;
  &lt;li&gt;the time they should receive a notification&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Flutter has a &lt;a href=&quot;https://pub.dev/packages/shared_preferences&quot;&gt;Shared Preferences&lt;/a&gt; package that provides persistant storage for simple data (which allows settings to be saved) but in my search I found the &lt;a href=&quot;https://pub.dev/packages/preferences&quot;&gt;Preferences&lt;/a&gt; package which takes it a step further and helps you generate a settings budget with a selection of pre-built widgets. This was so easy that I could do it without ever needing to figure out how to use the shared preferences package, but I wanted to Settings page to function a certain way requiring an auto-completing Google Location search, as well as Sliders and RangeSliders which weren’t implemented in the package.&lt;/p&gt;

&lt;p&gt;The other pre-built widgets were an ideal starting point for writing my own, and only needed a few tweaks to get working. On the plus side this was also a really easy way to learn how it used to Shared Preferences package to achieve the ability to save settings (easier than reading the README!) - I ended up using the Shared Preferences package elsewhere in my code so that was useful. The Sliders and RangeSliders were pretty trivial to write up, but the auto-completing Google Location search was more complicated than it should’ve been because of how confusing Google Cloud Console is.&lt;/p&gt;

&lt;p&gt;I’m pretty happy with how it’s come out but I’ll still need to implement a feature so that a prompt appears when the app is first installed that redirects the user to the settings page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/firescript-577a2.appspot.com/o/imgs%2Fapp%2FAndyNotes%2FjoZHmDynNl.png?alt=media&amp;amp;token=b0af3cf5-01e8-463b-86b2-71f688705354&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">This is Part 3 of my posts about learning Flutter. Click here for Part 1 and Part 2</summary></entry><entry><title type="html">Figuring out Flutter notifications</title><link href="http://localhost:4000/learning/cs/2020/08/10/flutter2.html" rel="alternate" type="text/html" title="Figuring out Flutter notifications" /><published>2020-08-10T17:19:03+10:00</published><updated>2020-08-10T17:19:03+10:00</updated><id>http://localhost:4000/learning/cs/2020/08/10/flutter2</id><content type="html" xml:base="http://localhost:4000/learning/cs/2020/08/10/flutter2.html">&lt;p&gt;This is Part 2 of my posts about learning Flutter. For Part 1 see my &lt;a href=&quot;https://andyluu.com/learning/cs/2020/07/19/flutter.html&quot;&gt;post about getting started with Flutter&lt;/a&gt;. To recap, I spent some time learning about Flutter and writing Dart code, set up a really basic app, found a weather API that gave me the data I wanted and figured out how the parse the data.&lt;/p&gt;

&lt;p&gt;Delving straight into Flutter to try and code the main functionality of my Rain Checker app was really fun! I started off a bit freely but after messing around for half a day with trying to get a settings page and an autocompleting location search going I realised that I really should be working on the core functionality i.e. getting notifications to fire when it detects that its going to rain. Pretty much every app has notifications so it should be pretty simple to get working right? Wrong!&lt;/p&gt;

&lt;h2 id=&quot;why-arent-these-notifications-working&quot;&gt;Why aren’t these notifications working?&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;I started off on the wrong foot because I had somehow got the idea that the notifications that pop up on the top of your screen are called push notifications. It turns out they’re called push notifications when they’re pushed to your device by a server! This led me down a giant rabbit hole of setting up &lt;a href=&quot;https://firebase.google.com/&quot;&gt;Firebase Cloud Messaging&lt;/a&gt; and trying to figure out how to integrate with my rain forecasting code so it would prepare to issue a notification every day but cancel if it wasn’t going to rain.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;After eventually giving up on Firebase I decided to get the &lt;a href=&quot;https://pub.dev/packages/flutter_local_notifications&quot;&gt;Flutter Local Notifications package&lt;/a&gt; working which was way harder than I expected because the readme was quite confusing and the different articles and Youtube videos about it all seemed to implement it in a slightly different way. After managing to get scheduled notifications working I realised that I wouldn’t be able to both run my rain checking code and issue a notification when the app wasn’t active.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finally after a helpful StackOverflow post I combined the Flutter Local Notifications package with the &lt;a href=&quot;https://pub.dev/packages/workmanager&quot;&gt;Flutter workmanager package&lt;/a&gt; which was finally able to send the notifications I wanted. Slight problem though - sometimes it would work properly and other times it wouldn’t. It was time-consuming to test scheduled notifications because workmanager has a minimum periodicity of 15 minutes, but eventually I was able to iron out all the issues in my code to get it working consistently. I had an idea for an app to help developers test scheduled notifications by changing the datetime of the device at a specific rate - maybe for my next app!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;My notifications have broken a few times as I’ve tweaked the rest of my code but so far everything’s been a quick and simple fix&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;lessons-learned&quot;&gt;Lessons learned:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Flutter is still quite new so quite often I run into issues that there really isn’t much support out there. The Github issues page for the packages was quite useful though&lt;/li&gt;
  &lt;li&gt;There was a lot of value in running the example code myself and reading into how different things are implemented to get more familiar with how the package worked&lt;/li&gt;
  &lt;li&gt;When trying to debug a complicated issue a structured approach is really important i.e. change one thing at a time and re-test after each change&lt;/li&gt;
  &lt;li&gt;Workmanager itself has some limitations - notifications often don’t fire at the exact time its scheduled&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;10-15-hours-later&quot;&gt;10-15 hours+ later:&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/jUb1S3Pad19B9lhS3WslEcPiXFhGNhaqZ6znRG8TelE9nDfuEKmQrwWicqS7R9xX810B2bTtFrQZ7T4dFLS2mjQA5P_HD5BsHP0blUU71kHHnqTk6TfMKLuVBvVrRGJH4il68GuDA1aGzp6NYGK_lJd2V9gDwTBS4SXiZh9uIFhA-eIdcsR1YAhiSUHejAJUId-PyZReILERb9YZCTktMYQ_uOKCaFn3Q7q3Kzom5mBsSU33m7jSJ5jjr-1IBuCNBR8NlLkkTX4wnBw15plMLLYuPq4u_199fTNOnnopWhjDliaZWi5aQB35mn3x_oDTKXklkC3Wl6NSeJgIw0v2ZR1n5jHuKciOJuXgqkSqN4WYJ7wz7OYOoWLl6XA77isxOUVLFwFlAJk_Tuu3658E9lak4RBbj5yy2fOwXWdmh6VXQ_Uj_bpVsQtn0SO_OcftXSkfu9N8psK-J95Hlz_F9D8kGsYpJR6oFuTrcVXl71x-YF7ahxcoVQ0EKCWQFjtSVey2olTL1cYRvljCRIWCZpyi9i-hHQ-VFJ6taKC0doeN3Qh0ZvZA9sqL0GINugLz6Zcd1XFyRclpFGNK7gs2246XKjnlX8exQSWy01GA1PVpPAdpvd_cJ05R6VSv1r1P9zLXe4x44rpdxym4m_ipgX65TWloeUxzd2nSogvtSKvV7XlWKcLBJX51f1s4Vy8=w422-h937-no?authuser=0&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">This is Part 2 of my posts about learning Flutter. For Part 1 see my post about getting started with Flutter. To recap, I spent some time learning about Flutter and writing Dart code, set up a really basic app, found a weather API that gave me the data I wanted and figured out how the parse the data.</summary></entry><entry><title type="html">HealthHack 2020</title><link href="http://localhost:4000/learning/cs/2020/08/02/healthhack.html" rel="alternate" type="text/html" title="HealthHack 2020" /><published>2020-08-02T17:19:03+10:00</published><updated>2020-08-02T17:19:03+10:00</updated><id>http://localhost:4000/learning/cs/2020/08/02/healthhack</id><content type="html" xml:base="http://localhost:4000/learning/cs/2020/08/02/healthhack.html">&lt;p&gt;Over the last two weekends I took part in &lt;a href=&quot;https://www.healthhack.com.au/&quot;&gt;HealthHack 2020&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&quot;how-did-i-end-up-getting-involved&quot;&gt;How did I end up getting involved?&lt;/h2&gt;
&lt;p&gt;I was talking to a friend (shoutout to Jason Lim!) about my progress in learning computer science and he mentioned that some people have been running COVID-19 hackathons. I looked up hackathons but most had either been cancelled during COVID-19 or were exclusively for university students. HealthHack was pretty accessible and it was even fully virtual so it was low commitment&lt;/p&gt;

&lt;h2 id=&quot;what-did-i-hope-to-get-out-of-it&quot;&gt;What did I hope to get out of it?&lt;/h2&gt;
&lt;p&gt;I wanted to experience what a hackathon was like - I wasn’t confident in my technical abilities but hoped to do a bit of coding and also experience what it’s like to work in a team to develop software to solve a problem.&lt;/p&gt;

&lt;h2 id=&quot;what-was-the-experience-like&quot;&gt;What was the experience like?&lt;/h2&gt;
&lt;p&gt;I almost backed out during the first night but I found the perfect team:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The problem owner was a former HealthHack organiser so I felt like that’d be a good team for someone new to hackathons&lt;/li&gt;
  &lt;li&gt;The problem owner was looking to implement a fairly low tech solution and wasn’t looking for any particularly strong software development skills&lt;/li&gt;
  &lt;li&gt;The problem (how to help researchers better communicate their research to the public) was pretty close to something I’ve been thinking about (how to help the public better understand research and news articles citing research)&lt;/li&gt;
  &lt;li&gt;I had some great team members with a wide variety of backgrounds who were also beginners at coding&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The other teams made some amazing things! Even though I think my team fell short in terms of a final polished solution I’m glad I chose them because:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I learnt a lot about the product design side of software engineering i.e. the user journey, identifying and addresss pain points, brainstorming and ideation&lt;/li&gt;
  &lt;li&gt;I felt like I was able to make some meaningful contributions from a coding perspective.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-did-i-enjoy&quot;&gt;What did I enjoy?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;I really enjoyed the process of writing Google Apps Scripts to try and link all our spreadsheets, docs and forms together. There was a lot of problem solving done and I got a lot of JavaScript practice&lt;/li&gt;
  &lt;li&gt;I liked the event being virtual. It minimised the disruption to my weekends - I could easily hop off to do other things or multitask them. I’ve also always been terrible with presentations so it made that experience much less painful.&lt;/li&gt;
  &lt;li&gt;I liked how collaborative and non-competitive the event was - having no prizes was definitely a great idea&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-did-i-not-enjoy&quot;&gt;What did I not enjoy?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;I was surprised by both the abundant supply and demand of software engineers. Most of the problems specifically asked for team members with UX design or front end / back end software development skills. The majority of people seemed to fall in this category with the remaining working in health-related industries so I felt like a bit of an outsider.&lt;/li&gt;
  &lt;li&gt;There were a few instances where I thought that we were talking things to death or ideas were being brought up for the 10th time that just made me zone out form the discussion&lt;/li&gt;
  &lt;li&gt;Two weekends is a pretty big commitment of time and I think the lack of time pressure made everything happen pretty slowly&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;would-i-do-it-again&quot;&gt;Would I do it again?&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Yes! I would do HealthHack or another hackathon again in the future&lt;/li&gt;
  &lt;li&gt;I would want to develop my technical skills further so I feel less constrained in the problems I can choose and the contributions I can make. Ideally I’d like to have some experience working as a software engineer first.&lt;/li&gt;
  &lt;li&gt;However it would depend if there’s a problem that I feel passionate about&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Over the last two weekends I took part in HealthHack 2020!</summary></entry><entry><title type="html">Is Catan a game of luck?</title><link href="http://localhost:4000/misc/2020/07/26/catan.html" rel="alternate" type="text/html" title="Is Catan a game of luck?" /><published>2020-07-26T17:19:03+10:00</published><updated>2020-07-26T17:19:03+10:00</updated><id>http://localhost:4000/misc/2020/07/26/catan</id><content type="html" xml:base="http://localhost:4000/misc/2020/07/26/catan.html">&lt;p&gt;I don’t even remember why I bought a board game or why I chose Catan but it holds a special place in my heart as the first board game I ever bought for myself. I’ve played a lot of other board games since then but Catan one of those games that I always find myself going back to! A decent online Catan platform called Colonist.io has popped up recently and playing some more competitive games with my friends has really inspired me to read more strategy and reflect on why some of my friends enjoy it and some don’t.&lt;/p&gt;

&lt;h1 id=&quot;a-game-of-luck-or-a-game-of-skill&quot;&gt;A game of luck or a game of skill?&lt;/h1&gt;

&lt;p&gt;The most common complaint that I hear about the game is that there is too much luck involved. I’ve always accepted that there is a luck element involved in the game but I don’t agree that there is too much - there’s a reason that some of my friends never win and others win a lot. From my experiences the players that don’t enjoy the game generally do one of two things:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;they don’t put their starting settlements in good spots&lt;/li&gt;
  &lt;li&gt;they don’t trade during the game&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It makes sense from this perspective because without these you’re really at the complete mercy of the dice rolls. I’ve definitely found myself in games where I’m in a really bad position and it feels like a chore to play because I took a risk that flopped and I have no real chance of winning unless I get perfect dice rolls. The important thing is know how to both secure yourself a strong position and take the initiative to trade so that you’re not relying on luck to win. I watched some commentary from a pro player who thought that with perfect play the luck factor is about 20% which I agree with. I’ll accept that there are some players that don’t want to strategize and think about how to secure a stronger position, but for those that are even a little interested, here are some tips:&lt;/p&gt;

&lt;h2 id=&quot;beginner-tips&quot;&gt;Beginner tips:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Are there better spots with more dots? 11-13 dots is ideal&lt;/li&gt;
  &lt;li&gt;Do you have any tiles with 6 or 8? these will usually get rolled the most often after 7&lt;/li&gt;
  &lt;li&gt;No wheat means defeat - you need it for everything except roads&lt;/li&gt;
  &lt;li&gt;Wood and brick are useless unless you have both&lt;/li&gt;
  &lt;li&gt;Can you build to a port at some point in the game?&lt;/li&gt;
  &lt;li&gt;Try to aim for either longest road or largest army&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;intermediate-tips&quot;&gt;Intermediate tips:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;You don’t need every resource - Ore / Wheat / Sheep is a popular strategy&lt;/li&gt;
  &lt;li&gt;There are only 3 brick 3 ore tiles - if you want to secure good numbers on either resource, plan ahead&lt;/li&gt;
  &lt;li&gt;Don’t get longest road early - it’s easy to take from you and you’ll get targeted&lt;/li&gt;
  &lt;li&gt;Do you have a variety of numbers? if you’re stacking up on numbers you’re more reliant on dice rolls&lt;/li&gt;
  &lt;li&gt;Look at the entire board and think about which resources are scarce&lt;/li&gt;
  &lt;li&gt;Adapt your strategy to what position you are in - 4th player may not access to a resource if it’s scarce&lt;/li&gt;
  &lt;li&gt;Before you place your first settlement, consider what options you will likely have for your second settlement&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;advanced-tips&quot;&gt;Advanced tips:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Can you place a settlement to lock the players after you out of a resource entirely?&lt;/li&gt;
  &lt;li&gt;There’s no point securing yourself strong setup if it means other players have a better setup&lt;/li&gt;
  &lt;li&gt;Look at what resources other players will aim for with their second settlement - consider placing defensively to block the spots they will want to place on&lt;/li&gt;
  &lt;li&gt;If you’re 4th position avoid placing on the coast because this will give the other players more options for their second settlement&lt;/li&gt;
  &lt;li&gt;Think about who will want to trade with you and what resources they will have too much of&lt;/li&gt;
  &lt;li&gt;Consider the likelihood that a tile will be blocked during the game&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">I don’t even remember why I bought a board game or why I chose Catan but it holds a special place in my heart as the first board game I ever bought for myself. I’ve played a lot of other board games since then but Catan one of those games that I always find myself going back to! A decent online Catan platform called Colonist.io has popped up recently and playing some more competitive games with my friends has really inspired me to read more strategy and reflect on why some of my friends enjoy it and some don’t.</summary></entry><entry><title type="html">Getting started with Flutter</title><link href="http://localhost:4000/learning/cs/2020/07/19/flutter.html" rel="alternate" type="text/html" title="Getting started with Flutter" /><published>2020-07-19T17:19:03+10:00</published><updated>2020-07-19T17:19:03+10:00</updated><id>http://localhost:4000/learning/cs/2020/07/19/flutter</id><content type="html" xml:base="http://localhost:4000/learning/cs/2020/07/19/flutter.html">&lt;p&gt;When I was brainstorming ideas for personal projects to work on, I thought about trying to make my own mobile app. Wanting to start with something simple, I decided to make a weather app - with a twist! I’ve used weather apps and widgets in the past but I normally find myself uninstalling them because the weather in Sydney is pretty stable and most of the time I don’t care about the weather. The only time I really care about the weather is when it’s going to rain that day and I should probably bring an umbrella. It sounded simple enough - do absolutely nothing except tell me when it’s going to rain that day.&lt;/p&gt;

&lt;h2 id=&quot;how-to-get-started&quot;&gt;How to get started?&lt;/h2&gt;
&lt;p&gt;I read some advice that a good way of being motivated to work on projects is to try and use new languages/technologies that you have to learn. I agree! I heard a friend talking about Flutter a while ago and this was the perfect opportunity to learn it. My usual routine of googling and searching through reddit for recommendations of learning resources led me to &lt;a href=&quot;https://flutter.dev/docs/get-started/install&quot;&gt;the official documentation&lt;/a&gt;, which is actually quite good. Overall it was easy to follow and quite clear, but:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Be prepared for some pretty huge file downloads&lt;/li&gt;
  &lt;li&gt;I ran into a frustrating issue related to the Java JDK version that took me a few hours of attempted debugging before I gave up and posted an &lt;a href=&quot;https://github.com/flutter/flutter/issues/61354&quot;&gt;an issue on Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I watched a few introduction to Flutter videos on Youtube as well, but some of them were outdated and referenced older documentation. &lt;a href=&quot;https://www.youtube.com/watch?v=DIn-4nRfkUg&quot;&gt;This&lt;/a&gt; was probably the best video I found - made pretty recently and long but quite easy to follow at 2x speed. There are only a few videos on Youtube but App Brewery partnered with the Google Flutter team to provide the first half of the course for free &lt;a href=&quot;https://flutter.dev/freecourse&quot;&gt;here&lt;/a&gt;! The course is really good at explaining the concepts such that even a beginner could follow along but a more experienced programmer might find some of the lessons pretty trivial. I ended up following closely along with the first few chapters and then skimming through the rest.&lt;/p&gt;

&lt;h2 id=&quot;a-lot-of-tinkering&quot;&gt;A lot of tinkering&lt;/h2&gt;
&lt;p&gt;I read through the Dart documentation as well, but didn’t spend too much time there because it seemed pretty similar to Java. The main differences so far are things that I’ve seen in other languages like JavaScript, or syntactic sugar. I knew that the core of my app would be a weather API that provided data for probability of precipitation (PoP), so I started with a search for that. Unfortunately the Flutter weather package uses OpenWeather’s API which didn’t include PoP, but there is a http package that I could use. It was surprisingly difficult to find a weather API that was both free and included PoP, but after a long search I discovered &lt;a href=&quot;https://www.weatherbit.io/&quot;&gt;weatherbit.io&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;At this point I sat down and wrote myself a list of:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;What functionalities I wanted the app to have&lt;/li&gt;
  &lt;li&gt;What settings I wanted the app to have&lt;/li&gt;
  &lt;li&gt;What problems I expected to have to tackle&lt;/li&gt;
  &lt;li&gt;A rough outline of the steps I expected to work through&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As of now I’ve got a pretty rudimentary app set-up and I’m able to extract the PoP data but I have a lot of work to go. It’ll be interesting to look back at my progress after I’m done and see how I could have made it easier for me!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/firescript-577a2.appspot.com/o/imgs%2Fapp%2FAndyNotes%2F2hxJgcX9w4.png?alt=media&amp;amp;token=3863a8b5-5f96-4d84-8907-67708282b792&quot; width=&quot;520&quot; height=&quot;750&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/firescript-577a2.appspot.com/o/imgs%2Fapp%2FAndyNotes%2F-nSX0JjSQN.png?alt=media&amp;amp;token=fd6ae0e1-14b0-45c4-9af5-9f4887669a81&quot; width=&quot;308&quot; height=&quot;646&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">When I was brainstorming ideas for personal projects to work on, I thought about trying to make my own mobile app. Wanting to start with something simple, I decided to make a weather app - with a twist! I’ve used weather apps and widgets in the past but I normally find myself uninstalling them because the weather in Sydney is pretty stable and most of the time I don’t care about the weather. The only time I really care about the weather is when it’s going to rain that day and I should probably bring an umbrella. It sounded simple enough - do absolutely nothing except tell me when it’s going to rain that day.</summary></entry><entry><title type="html">Algorithms</title><link href="http://localhost:4000/learning/cs/2020/07/12/algorithms.html" rel="alternate" type="text/html" title="Algorithms" /><published>2020-07-12T17:19:03+10:00</published><updated>2020-07-12T17:19:03+10:00</updated><id>http://localhost:4000/learning/cs/2020/07/12/algorithms</id><content type="html" xml:base="http://localhost:4000/learning/cs/2020/07/12/algorithms.html">&lt;p&gt;My biggest takeaway from the Princeton Algorithms course (&lt;a href=&quot;https://www.coursera.org/learn/algorithms-part1/home/welcome&quot;&gt;Part 1&lt;/a&gt; and &lt;a href=&quot;https://www.coursera.org/learn/algorithms-part2/home/welcome&quot;&gt;Part 2&lt;/a&gt;) was an appreciation for why knowledge about data structures and algorithms (DSAs) is so important to software design. An idea that the course hits on several times throughout these courses is that the choice of a faster DSA can be significantly more impactful to the performance of a progam compared to improvements in hardware or increasing the amount of computing power utilised.&lt;/p&gt;

&lt;h2 id=&quot;do-i-even-need-this-information-on-the-job&quot;&gt;Do I even need this information on the job?&lt;/h2&gt;

&lt;p&gt;Throughout the course, I would wonder things like:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Do I really need to know how left-leaning red black trees work?&lt;/li&gt;
  &lt;li&gt;Do I really need to know how to implement the Knuth-Morris Pratt algorithm?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The general consensus from talking to friends and &lt;a href=&quot;https://www.reddit.com/r/cscareerquestions/comments/ho0o5l/how_data_structure_and_algorithm_is_actually_used/&quot;&gt;Reddit&lt;/a&gt; seems to be that knowing how to specifically implement different DSAs isn’t necessary, but knowledge about their properties and impact on time and complexity can be quite important. The course is definitely aware of this and provides you with implementations for almost every DSA it teaches, while still making sure to walk through their properties and how they would be implemented in Java.&lt;/p&gt;

&lt;p&gt;Maybe others would even find themselves interested in the field of algorithmic research - the course has a lot of great historical context on how we developed the DSAs in use today and what could potentially be developed in the future.&lt;/p&gt;

&lt;h2 id=&quot;am-i-ready-for-interviews-now&quot;&gt;Am I ready for interviews now?&lt;/h2&gt;

&lt;p&gt;Completing the course doesn’t make me feel like I’m ready for interviews, but I feel like I’ve built the foundation for the rest of my study. I can’t remember how to implement a heap sort or DFS at the moment, but it’s going to be much much easier when I review that again one day.&lt;/p&gt;

&lt;p&gt;DSAs weren’t something that I really thought about right up until I started working through Leetcode problems and my naive approaches weren’t quite cutting it. I’d encounter medium difficulty problems and feel like pieces of the puzzle were missing. I feel like I have most of those missing puzzle pieces now. I’m looking forward to putting some time into Leetcode seeing how much I’ve progressed - but that’ll have to wait for a future post.&lt;/p&gt;</content><author><name></name></author><summary type="html">My biggest takeaway from the Princeton Algorithms course (Part 1 and Part 2) was an appreciation for why knowledge about data structures and algorithms (DSAs) is so important to software design. An idea that the course hits on several times throughout these courses is that the choice of a faster DSA can be significantly more impactful to the performance of a progam compared to improvements in hardware or increasing the amount of computing power utilised.</summary></entry><entry><title type="html">What programming language should I learn first?</title><link href="http://localhost:4000/learning/cs/2020/07/05/language.html" rel="alternate" type="text/html" title="What programming language should I learn first?" /><published>2020-07-05T17:19:03+10:00</published><updated>2020-07-05T17:19:03+10:00</updated><id>http://localhost:4000/learning/cs/2020/07/05/language</id><content type="html" xml:base="http://localhost:4000/learning/cs/2020/07/05/language.html">&lt;p&gt;&lt;em&gt;What programming language should I learn first?&lt;/em&gt; is probably one of the first questions that pops in the head of every person thinking about learning how to code. I’ve been asked this very question from a few friends that I’ve discussed learning how to code with, and my answer is usually &lt;strong&gt;Python&lt;/strong&gt;. It’s not the first language I learned and I would still consider myself a beginner at Python, but as someone who sat on the sidelines thinking about learning how to code for years I’m happy to make that recommendation for three main reasons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;An easy learning curve&lt;/li&gt;
  &lt;li&gt;Really simple and readable syntax&lt;/li&gt;
  &lt;li&gt;A huge amount of free online resources&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Of course there’s more to consider when choosing a language, but for the average person thinking about learning how to code I think they would have the best success with Python for these reasons.&lt;/p&gt;

&lt;h2 id=&quot;a-case-for-c&quot;&gt;A case for C?&lt;/h2&gt;
&lt;p&gt;Despite what I said above, I was so impressed by the CS50: Introduction to Computer Science course at Harvard that I’ve actually started linking &lt;a href=&quot;https://www.youtube.com/watch?v=jjqgP9dpD1k&quot;&gt;the introductory lecture&lt;/a&gt; to friends who express an interest in learning how to code. It might seem overkill to give someone with slight interest an hour long lecture to watch, but it’s such a great explanation of the basics of computer science that most people could follow.&lt;/p&gt;

&lt;p&gt;The course actually starts with some brief exposure to the visual programming language Scratch (which is great for anyone completely new to programming) but starts teaching C for anyone who was able to make it past the introductory lecture. This was probably the most contentious part of the course while I was completing it, but now a few months later I can appreciate how this choice allowed the course to teach fundamental computer science comments like machine code / assembly / compilers / memory / pointers that I have not encountered in any other course.&lt;/p&gt;

&lt;p&gt;The course does a great job of supporting this with the lectures, IDE, automatic grader and even Python towards the end of the course, but I could see this being a challenge for some people. I’d definitely recommend the course early in someone’s study journey but ideally after an initial foray into Python.&lt;/p&gt;

&lt;h2 id=&quot;what-about-java&quot;&gt;What about Java?&lt;/h2&gt;
&lt;p&gt;I’ve actually decided recently that I want to put more effort into learning Java compared to Python, but I still wouldn’t recommend it as someone’s first programming language over Python. I remember my first impressions of Java being:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Why is it so much harder to write than Python?&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Why do I have to type System.out.println instead of print?&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;What on earth is private, static and void?&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These were questions I asked as someone familiar with Python, so I can imagine how confusing it would be for someone new to programming. As with any other language though, the weird syntax makes sense as you get more familiar with Java and can appreciate the advantages of explicitly declaring everything.&lt;/p&gt;

&lt;p&gt;Ultimately I decided to focus on Java because the general online consensus was that there were more opportunities for Java programmers, but I will continue learning Python because how fast it can be written can make it invaluable for writing code during interviews.&lt;/p&gt;</content><author><name></name></author><summary type="html">What programming language should I learn first? is probably one of the first questions that pops in the head of every person thinking about learning how to code. I’ve been asked this very question from a few friends that I’ve discussed learning how to code with, and my answer is usually Python. It’s not the first language I learned and I would still consider myself a beginner at Python, but as someone who sat on the sidelines thinking about learning how to code for years I’m happy to make that recommendation for three main reasons:</summary></entry><entry><title type="html">Missing Semester</title><link href="http://localhost:4000/learning/cs/2020/06/28/missing-semester.html" rel="alternate" type="text/html" title="Missing Semester" /><published>2020-06-28T17:19:03+10:00</published><updated>2020-06-28T17:19:03+10:00</updated><id>http://localhost:4000/learning/cs/2020/06/28/missing-semester</id><content type="html" xml:base="http://localhost:4000/learning/cs/2020/06/28/missing-semester.html">&lt;p&gt;In May 2020 I went through the content of a course called &lt;a href=&quot;https://missing.csail.mit.edu/&quot;&gt;The Missing Semester of Your CS Education&lt;/a&gt;. As the name suggests it aims to fill in the gaps of a typical CS degree, or more specifically as the creators describe: “&lt;em&gt;There’s one critical subject that’s rarely covered, and is instead left to students to figure out on their own: proficiency with their tools”.&lt;/em&gt; Here’s the curriculum if you’re interested:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/firescript-577a2.appspot.com/o/imgs%2Fapp%2FAndyNotes%2FW7SMWYkbU9.png?alt=media&amp;amp;token=b7963a80-d148-4f2b-b144-e603b8940be2&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;why-did-i-decide-to-do-this-course&quot;&gt;Why did I decide to do this course?&lt;/h1&gt;
&lt;p&gt;The OSSU curriculum is designed to emulate the content of a typical CS degree, and I felt like it also lacked coverage of the typical tools used by computer scientists. For example, I had set up a Github and used the desktop application to maintain my personal repository, but I never really understood how it worked. I found it hard to put aside time to research tools like Git, Bash or Vim and this course felt like a good opportunity to finally learn how to use these tools. It also made sense to learn more about these tools early in my study as I expected to be using them throughout my career.&lt;/p&gt;

&lt;h1 id=&quot;what-was-good-about-the-course&quot;&gt;What was good about the course?&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;For the most part the course lectures were really good at introducing a tool, explaining at a high level how it works, and talking about what it’s used for and why it’s used. In particular I think the lectures on the shell, Git, Vim and Data Wrangling were the best. The lecture notes were also well written and useful for background before the lecture or a recap afterwards.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I was introduced to many tools like more advanced shell commands, shell scripts, grep, sed, awk and profilers. Even if I don’t remember the details in the future, I’m aware they exist and it’s easy to look further into how to use them&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The lectures can be watched on their own in any order without any pre-requisites so even if you’re only interested in one or two topics you can still benefit from the course lectures. I found them quite approachable even as a beginner.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-could-be-improved&quot;&gt;What could be improved?&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;My biggest gripe with the course was the lack of solutions to the exercises. I think being able to review the content and trying to apply it to solve problems is an extremely important part of learning and without solutions its pretty difficult to know if you’ve applied concepts correctly. It was possible to google some of the solutions or work from others but for the most part I was on my own. I do acknowledge that this is normally a course at MIT where you can ask the tutors for assistance though.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I think the course would definitely benefit from the consistency of having a single lecturer instead of dividing it between three different people. In particular I thought Jon was an amazing lecturer while it was difficult to understand Jose at times (the first few lectures had captions which helped).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I thought there was also a difference in quality between the courses although there may be some bias because I was more interested in certain tools than others. For example I found the lecture on Git very well explained and illustrated in terms of how it works and why it’s used, but the lecture on the Command-Line environment provided relatively shallow coverage of multiple loosely related tools. I can see how the main goal is to introduce the existence of these tools though, so I think more discussion about where/why they’re used would be good.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h1&gt;
&lt;p&gt;Overall I really enjoyed this course and I’d recommend it to anyone also looking to learn more about the tools explored in the course. If going through the whole thing is too much to commit to, just pick the topics that you’re actually interested in learning more about!&lt;/p&gt;</content><author><name></name></author><summary type="html">In May 2020 I went through the content of a course called The Missing Semester of Your CS Education. As the name suggests it aims to fill in the gaps of a typical CS degree, or more specifically as the creators describe: “There’s one critical subject that’s rarely covered, and is instead left to students to figure out on their own: proficiency with their tools”. Here’s the curriculum if you’re interested:</summary></entry><entry><title type="html">Staying on track</title><link href="http://localhost:4000/learning/cs/2020/06/21/Staying-on-track.html" rel="alternate" type="text/html" title="Staying on track" /><published>2020-06-21T17:19:03+10:00</published><updated>2020-06-21T17:19:03+10:00</updated><id>http://localhost:4000/learning/cs/2020/06/21/Staying%20on%20track</id><content type="html" xml:base="http://localhost:4000/learning/cs/2020/06/21/Staying-on-track.html">&lt;p&gt;While I was starting my journey of teaching myself how to code, my partner also introduced me to the world of Personal Knowledge Management through tools like &lt;a href=&quot;https://www.notion.so/&quot;&gt;Notion&lt;/a&gt; and &lt;a href=&quot;https://roamresearch.com/&quot;&gt;Roam&lt;/a&gt;. In the past I had used Google Keep to track personal notes and task reminders and while its great how simple it is to use, it’s quite limited in its ability to manage any substantial amount of knowledge effectively. There’s a mountain of tools out there and different things work for different people, but I’ve been using Roam since the start of 2020 and I found it fairly easy to start using it to help me with my self-learning too.&lt;/p&gt;

&lt;h1 id=&quot;planning-it-out&quot;&gt;Planning it out&lt;/h1&gt;
&lt;p&gt;I played around with making a Kanban-style plan that factored in the course dependencies and estimated course durations but I ended up with something extremely simple: a list of months where I roughly slotted in courses in the order I wanted to do them, with checkboxes to mark my completed items. It guided my progress and was an easy way to see how I was progressing at a high level. I set it up as a Notion page since I was using Notion at the time, but it could easily be done on any platform. I was &lt;a href=&quot;https://andyluu.com/learning/cs/2020/06/07/A-few-detours.html&quot;&gt;quite flexible with adding different study material to the OSSU curriculum&lt;/a&gt; and this made it really easy to shift things around.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/firescript-577a2.appspot.com/o/imgs%2Fapp%2FAndyNotes%2FjDC3aFqLOH.png?alt=media&amp;amp;token=bae9d956-2f50-499a-b4df-4ed3df358568&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;tracking-your-daily-progress&quot;&gt;Tracking your daily progress&lt;/h1&gt;
&lt;p&gt;Since I was planning to study in my spare time while working full-time, I knew that setting daily study targets and tracking my progress daily was something that I wanted to do. Luckily I had also started daily journalling on Roam! The section of my daily journal dedicated to my study varied from just quick one-liners to a few paragraphs about what I learnt. I had some rough goals of 1-2 hours on weekdays and 4-5 hours on weekends so it was easy to see for myself at the end of the day whether I was keeping up with this. For the weekends in particular I would recommend setting yourself up with a rough schedule on your calendar app (I used Google Calendar) to help you manage your tasks with the bonus of easily tracking how much time you’re spending on different tasks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/firescript-577a2.appspot.com/o/imgs%2Fapp%2FAndyNotes%2FrfjHbmvDQ6.png?alt=media&amp;amp;token=25ead7d7-29d1-4a9d-9e58-ed281eb92576&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;reflecting-on-your-progress&quot;&gt;Reflecting on your progress&lt;/h1&gt;
&lt;p&gt;It was also important for me to take a step back every now and then to ask myself questions like:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;How much progress have I made towards my goals?&lt;/li&gt;
  &lt;li&gt;Am I working hard enough?&lt;/li&gt;
  &lt;li&gt;Do I need to tweak my study plan?&lt;/li&gt;
  &lt;li&gt;Is there anything I need to change?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You could set a reminder to yourself to do this every month on its own but for me it was quite easy to just incorporate this into my monthly goal reviews where I reflect how my progress towards my life goals.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://firebasestorage.googleapis.com/v0/b/firescript-577a2.appspot.com/o/imgs%2Fapp%2FAndyNotes%2FF65l7bke1N.png?alt=media&amp;amp;token=70f88d48-c436-4448-b4e4-eebbad9fe9d6&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">While I was starting my journey of teaching myself how to code, my partner also introduced me to the world of Personal Knowledge Management through tools like Notion and Roam. In the past I had used Google Keep to track personal notes and task reminders and while its great how simple it is to use, it’s quite limited in its ability to manage any substantial amount of knowledge effectively. There’s a mountain of tools out there and different things work for different people, but I’ve been using Roam since the start of 2020 and I found it fairly easy to start using it to help me with my self-learning too.</summary></entry><entry><title type="html">A return to OSSU</title><link href="http://localhost:4000/learning/cs/2020/06/14/algorithms.html" rel="alternate" type="text/html" title="A return to OSSU" /><published>2020-06-14T17:19:03+10:00</published><updated>2020-06-14T17:19:03+10:00</updated><id>http://localhost:4000/learning/cs/2020/06/14/algorithms</id><content type="html" xml:base="http://localhost:4000/learning/cs/2020/06/14/algorithms.html">&lt;h1 id=&quot;back-to-ossu&quot;&gt;Back to OSSU&lt;/h1&gt;
&lt;p&gt;After a few &lt;a href=&quot;https://andyluu.com/learning/cs/2020/05/31/A-few-detours.html&quot;&gt;detours&lt;/a&gt; it was time to once again start working through the OSSU curriculum again in April 2020 and after getting through the &lt;a href=&quot;https://andyluu.com/jekyll/update/2020/05/31/learning-the-basics.html&quot;&gt;basics&lt;/a&gt; I felt like getting into some meatier topics. There were a few options, but I decided to go for the Algorithms / Data Structures course because it was an area that I had never really encountered in the past. There were also Leetcode problems that I struggled with even starting because I didn’t know the data structures required to solve them.&lt;/p&gt;

&lt;h1 id=&quot;princeton-vs-stanford&quot;&gt;Princeton vs Stanford&lt;/h1&gt;
&lt;p&gt;I started with the &lt;a href=&quot;https://www.coursera.org/learn/algorithms-divide-conquer&quot;&gt;Stanford course&lt;/a&gt; recommended by the OSSU curriculum but my impression after the first two weeks of content was that the course was fairly heavy on the analysis of algorithms rather than data structures so I looked up some other opinions on the course versus a &lt;a href=&quot;https://www.coursera.org/learn/algorithms-part1/home/welcome&quot;&gt;similar course offered by Princeton&lt;/a&gt;. It was even &lt;a href=&quot;https://github.com/ossu/computer-science/issues/519&quot;&gt;raised as an issue on the OSSU Github repository&lt;/a&gt; which seemed to echo the other opinions I found that both courses were quite good but emphasised different things. Generally the Princeton course seemed to be recommended over the Stanford course but with the caveat of requiring knowledge of Java. Based on my experience and my partner’s positive experience with the Princeton course I decided to make the switch. But first I had to learn Java!&lt;/p&gt;

&lt;h1 id=&quot;learning-java&quot;&gt;Learning Java&lt;/h1&gt;
&lt;p&gt;I did a quick run through the &lt;a href=&quot;https://www.codecademy.com/learn/learn-java&quot;&gt;Codecademy course&lt;/a&gt; as an introduction and then worked on the &lt;a href=&quot;https://java-programming.mooc.fi/part-1/1-starting-programming&quot;&gt;Java MOOC course&lt;/a&gt;. In hindsight I would go straight to the Java MOOC course which was more rigorous and hands-on. I stopped about halfway through once I thought I knew enough to start working through the Princeton course which was more or less right. More recently I’ve decided to focus on learning more advanced Java (more on this in a future course) which may take me back to finish the rest of the Java MOOC course.&lt;/p&gt;

&lt;h1 id=&quot;algorithms-part-1&quot;&gt;&lt;a href=&quot;https://www.coursera.org/learn/algorithms-part1/home/welcome&quot;&gt;Algorithms, Part 1&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I would &lt;strong&gt;definitely recommend&lt;/strong&gt; this course for anyone looking for a course on Algorithms / Data Structures and would even go as far as recommending you learn Java for the sole purpose of doing this course (a fairly basic knowledge of Java is honestly enough).&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The course content was very well explained by a lecturer who clearly understood the content deeply (and even designed one of the data structures taught!)&lt;/li&gt;
  &lt;li&gt;A lot of in-depth examples / demos for pretty much every concept presented in the courses&lt;/li&gt;
  &lt;li&gt;The historical context of why certain data structures are used over others and what outstanding problems there still are in the design of algorithms was relevant and really interesting&lt;/li&gt;
  &lt;li&gt;There is an automatic exercise grader which gives quite detailed feedback on your solutions&lt;/li&gt;
  &lt;li&gt;The exercises are well designed and focus on using the data structures to solve a problem, rather than writing the data structures from scratch, which is what you would do as a software engineer anyway&lt;/li&gt;
  &lt;li&gt;The main downside is that the audio for some lectures can be difficult to hear without earphones&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Back to OSSU After a few detours it was time to once again start working through the OSSU curriculum again in April 2020 and after getting through the basics I felt like getting into some meatier topics. There were a few options, but I decided to go for the Algorithms / Data Structures course because it was an area that I had never really encountered in the past. There were also Leetcode problems that I struggled with even starting because I didn’t know the data structures required to solve them.</summary></entry></feed>